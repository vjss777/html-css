@charset "UTF-8";

* {
    margin: 0px;
    padding: 0px;
    list-style: none;
    font-size: 20px;
    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;
    box-sizing: border-box;

}
body{
    margin-bottom: 200px;
}
    /*Menu flexbox*/
a {
    text-decoration: none;
    color: white;
}

.header {
    display: flex;
    /*Primeiro passo para utilizar o flexbox. Definir o display flex.*/
    justify-content: space-between;
    /*Alinhamento dos itens ao longo do eixo horizontal.
    flex-start (padrão): Os itens são alinhados a partir do início do eixo principal;
    flex-end: Os itens são alinhados a partir do fim do eixo principal;
    center: Os itens são alinhados ao centro do eixo principal;
    space-between: O primeiro item é deslocado para o início do eixo principal, o último é deslocado para o final do eixo principal e os demais são distribuídos uniformemente entre eles;
    space-around: Os itens são uniformemente distribuídos ao longo do eixo principal. Aqui, porém, são atribuídas margens iguais à esquerda e à direita (ou acima e abaixo, dependendo da direção do eixo principal). Por isso o primeiro e o último item não ficam “colados” nas bordas do container. */
    align-items: center; /*Define como os itens são posicionados de forma vertical no container. 
    stretch (padrão): Os itens serão esticados para preencher toda a dimensão do eixo transversal (altura ou largura);
    flex-start: Os itens são deslocadas para o início do eixo transversal;
    flex-end: Os itens são deslocadas para o final do eixo transversal;
    center: Os itens são centralizados no eixo transversal;
    baseline: Os itens são alinhados a partir da base da primeira linha de texto de cada um.
    */
    flex-wrap: wrap; /*
        nowrap (padrão): Todos os itens serão dispostos em uma linha;
        wrap: Ocorrerá a quebra de linha e os itens mais à direita serão deslocados para a linha de baixo;
        wrap-reverse: Ocorrerá a quebra de linha e os itens mais à direita serão deslocados para a linha de cima;  
    */
    padding: 20px;
    background-color: black;
}
.menu{
    display: flex;
}
.menu li{
    margin: 10px;
}
.menu li a{
    display: block;
    padding: 10px;
}
h1{
    text-align: center;
    margin-top: 30px;
    font-size: 2em;
}
img{
 max-width: 100%;
 display: block;
 }
/* CSS FLEXBOX 1*/

.flex1{
    display: flex;
    flex-wrap: wrap;
    max-width: 800px;
    margin: 0 auto; /*Top, bottom 0. Right, left auto*/
}
.flex1 > div{
    flex: 1 1 200px; /*Esta propriedade é uma forma abreviada para a escrita das propriedades flex-grow, flex-shrink e flex-basis, nesta ordem.
    Flex-grow -> Define a proporção com que um item deve crescer caso seja necessário. Valor padrão = 0, indica que o item não deve crescer.
    Flex-shrink -> Define a proporção com que um item deve encolher caso seja necessário. Valor padrão = 1.
    Flex-basis -> Dependendo da direção do eixo principal (horizontal ou vertical), essa propriedade define a largura ou altura mínima do elemento antes que ele seja redimensionado por outras propriedades.
    */
    margin: 10px;
}

/*CSS GRID 1*/

.grid1{
    display: grid;
    grid-template-columns: repeat(3, 1fr); /*Especifica o número (e as larguras) de colunas em um layout de grade*/
    grid-gap: 20px;
    max-width: 800px;
    padding: 10px;
    margin: 0 auto;
}

.grid1 > div:nth-child(n + 4){
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 10px; /* Espaçamento entre as colunas. row-gap:; para as linhas */
    align-items: center;
}
 .grid1 > div.anuncio{
    grid-column: 1;
    grid-row: 2 / 5;
    /*Cuida do posicionamento entre as colunas e linhas. Aqui digo que quero .anuncio na primeira coluna entre a linha 2 e 5 (2 / 5) com grid-row.*/
    display: block;
 }
 @media screen and (max-width: 600px){
    .grid1{
        grid-template-columns: repeat(2, 1fr);
    }
    .grid1 > div:nth-child(n + 4){
        display: block;
    }
    .grid1 > div.anuncio{
        grid-row: auto;
        grid-column: auto;
        order: -1; /*Modifica a ordem da div*/
    }
 }

 /*CSS Grid 2*/

 .grid2{
    display: grid;
    grid-template-columns: 1fr 200px; /*O grid template columns sozinho, permite que definirmos o tamanho de cada coluna. Nesse caso, uma coluna tem 1fr e a outra tem 200px. O mesmo vale para o grid-template-rows*/
    grid-gap: 20px;
    max-width: 800px;
    margin: 0 auto;
 }
 .sidebar > div{
    margin-bottom: 10px;
 }
 @media screen and (max-width: 800px){
    .grid2{
        grid-template-columns: 1fr;
    }
    .sidebar{
        display: flex;
        overflow: scroll;
    }
    .sidebar > div{
        flex: 1 0 200px;
        margin: 0 10px;
    }
 }

 /*SECTION GRID 3*/

 .grid3{
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    grid-gap: 20px;
    margin: 0 auto;
    max-width: 800px;
    padding: 10px;
 }

 .grid3-item:nth-child(1){
    grid-row: 1 / 3;
 }

 .grid3-item{
    display: grid;
 }

 .grid3-item img{
    grid-column: 1;
    grid-row: 1 / 3;
    align-self: end;
 }
 .grid3-item p{
    background: rgba(0, 0, 0, 0.278);
    padding: 10px;
    color: white;
    grid-row: 2;
    grid-column: 1;
    align-self: end;
 }